prvo smo hash-ali nase ime kako bi nasli medu fileovima nase ime(hashiramo jer je nemoguce odhashirat)


stvorili smo file sa nasin hashiranin imenon i tu zalpili sve ono sa stranice sa nasin imenon


imali smo challange eknriptiran simetricnin kljucen i za dekriptirat nan triba kjuc

(sa ferneton je enkriptirano i generiran je kljuc )

entropija kljuca je 22 bita (generiran je tako da je vecina pocetnih bitova 0 a zadnja 22 su generirana slucajno tj neznamoredosljed nula jedinica)
kako rjesit izazov? pogadati 22 bita , pretpostavit cemo neki kljuc i dekriptirat i vidit el to rjesenje ima smisla
sta ima smisla kod generiranja kljuceva (ocemo nasumicno ili ne)?
ako nasumicno pogadamo kljuc onda ce se dogodit da testiramo isti kljuc vise puta--->triba polazit kljuceve po redu


ako sam dobio nesto smisleno isprintaj key i spremi dekriptirani challange i onda izadi iz petlje
if sam_dobio_nesto_smisleno(plaintext):
	print(key)
	save(plaintext)
	break;


prije toga decryoted challenge mora biti nesti definirano prije funkcije
plaintext = Fernet(key).decrypt(ciphertext) //ciphertext je nas ovaj challenge

odakle nan ciphertext -> proslidit cemo ga bruteforceu ka varijablu

moramo imat ideju sta je eknriptirano,ako je enkriptiran tekst onda ce u tekstu biti rijeci iz tog jezika (na prijedlog da gledamo po rjecniku)
npr.rjec je je los primjer jer se lako nasumicno moze poklopiti--->moraju biti sta duze jer se smanjuje vjerojatnost da se nece slucajno poklopit


enkriptirana je slika u png formatu(on nan je reka)--->kako sad?
probat otvorit to u png formatu->nikad ne bi zavrsili-->kako editori slika znaju-->postoje neki podatci za png karakteristicni-->guglali smo (https://en.wikipedia.org/wiki/Portable_Network_Graphics)


testiramo je li slika
poslat cemo header iz dekriptiranog filea viditi el se poklapa sa ovin inf na wikipediji da vidimo el se poklapaju byeovi



kad sm opokrenilo imali smo exception-a na decrypt --->zasto-->kad ne bi vidili?
pokusavamo decryptirat ispravan cipher s neispravnim kljucem
kako sprijecit da prekid koda tj da se nastavi izvrsavat -> try catch





import base64
from os import path
from cryptography.hazmat.primitives import hashes
from cryptography.fernet import Fernet


def hash(input):
    if not isinstance(input, bytes):
        input = input.encode()

    digest = hashes.Hash(hashes.SHA256())
    digest.update(input)
    hash = digest.finalize()

    return hash.hex()


def test_png(header):
    if header.startswith(b"\221PNG\r\n\032\n"):
        return True
    return False


def brute_force(input):
    ctr = 0
    while True:
        key_bytes = ctr.to_bytes(32, "big")
        key = base64.urlsafe_b64encode(key_bytes)

        # Now initialize the Fernet system with the given key
        # and try to decrypt your challenge.
        # Think, how do you know that the key tested is the correct key
        # (i.e., how do you break out of this infinite loop)?
        try:
            plaintext = Fernet(key).decrypt(ciphertext)
            header = plaintext[:32]

            if test_png(header):
                print(f"BINGO: {key}")
                with open("BINGO.png", "wb") as file:
                    file.write(plaintext)
                break
        except Exception:
            pass
        ctr += 1
        if not ctr % 1000:
            print(f"[*]Keys tested: {ctr:,}", end="\r")


if __name__ == "__main__":
    filename = hash('galiatovic_marija') + ".encrypted"

# Create a file with the filename if it doesnt already exist
if not path.exists(filename):
    with open(filename, "wb") as file:
        file.write(b"")


# open your challenge file and read your challange
with open(filename, "rb") as file:
    ciphertext = file.read()

# provjera eli radi
# print(ciphertext)
# Start the attack

brute_force(ciphertext)

